https://www.codecademy.com/en/courses/ruby-beginner-en-pEdhY/0/4?curriculum_id=5122d839c0a131c35f00013d
A RESTful API
An API, or application programming interface, is kind of like a coding contract: it specifies the ways a program can interact with an application. For example, if you want to write a program that reads and analyzes data from Twitter, you'd need to use the Twitter API, which would specify the process for authentication, important URLs, classes, methods, and so on.

Client - Server communication via REST (Representational State Transfer)
Clicking through the pages of a site == making state transitions

For an API or web service to be RESTful, it must do the following:

1. Separate the client from the server
2. Not hold state between requests (meaning that all the information necessary to respond to a request is available in each individual request; no data, or state, is held by the server from request to request)
3. Use HTTP and HTTP methods (as explained in the next section).
There are some other requirements, but they're beyond the scope of this lesson.

GET, POST, PUT, DELETE

An HTTP request is made up of three parts:

1. The request line, which tells the server what kind of request is being sent (GET, POST, etc.) and what resource it's looking for;
2. The header, which sends the server additional information (such as which client is making the request)
3. The body, which can be empty (as in a GET request) or contain data (if you're POSTing or PUTing information, that information is contained here).

# example POST request
POST /codecademy/learn-http HTTP/1.1 # the request line
Host: www.codecademy.com # the header
Content-Type: text/html; charset=UTF-8

Name=Eric&Age=26 # the data to be posted

Endpoints are API-defined locations where particular data are stored. Just as you'll GET a pair of pants from PantsWorld or you'll GET a bag of peanuts from PeanutHut, you'll GET something different depending on the endpoint you use.

For instance, if you're using the API for a video hosting service, there might be endpoints for the most popular videos, the most recent videos, or videos belonging to a certain genre or category.

Authentication & API Keys
Many APIs require an API key. Just as a real-world key allows you to access something, an API key grants you access to a particular API. Moreover, an API key identifies you to the API, which helps the API provider keep track of how their service is used and prevent unauthorised or malicious activity.

Some APIs require authentication using a protocol called OAuth. We won't get into the details, but if you've ever been redirected to a page asking for permission to link an application with your account, you've probably used OAuth.

API keys are often long alphanumeric strings. We've made one up in the editor to the right! (It won't actually work on anything, but when you receive your own API keys in future projects, they'll look a lot like this.)

HTTP Status Codes
A successful request to the server results in a response, which is the message the server sends back to you, the client.

The response from the server will contain a three-digit status code. These codes can start with a 1, 2, 3, 4, or 5, and each set of codes means something different. (You can read the full list here). They work like this:

1xx: You won't see these a lot. The server is saying, "Got it! I'm working on your request."
2xx: These mean "okay!" The server sends these when it's successfully responding to your request.
3xx: These mean "I can do what you want, but I have to do something else first." You might see this if a website has changed addresses and you're using the old one; the server might have to reroute the request before it can get you the resource you asked for.
4xx: These mean you probably made a mistake. The most famous is "404," meaning "file not found": you asked for a resource or web page that doesn't exist.
5xx: These mean the server goofed up and can't successfully respond to your request.

Anatomy of a Response
The HTTP response structure mirrors that of the HTTP request. It contains:

A response line, which includes the three-digit HTTP status code;

A header, which includes further information about the server and its response;

The body, which contains the text of the response.

Parsing XML
XML (which stands for E xtensible Markup Language) is very similar to HTMLâ€”it uses tags between angle brackets. The difference is that XML allows you to use tags that you make up, rather than tags that the W3C decided on. For instance, you could create an API that returns information about a pet:

<pet>
  <name>Jeffrey</name>
  <species>Giraffe</species>
</pet>
As long as you document the structure of your API's response, other people can use your API to get information about <pet>s.


Parsing JSON

JSON (which stands for JavaScript Object Notation) is an alternative to XML. It gets its name from the fact that its data format resembles JavaScript objects, and it is often more succinct than the equivalent XML. For instance, our same <pet> Jeffrey would look like this in JSON:

{
  "pets": {
    "name": "Jeffrey",
    "species": "Giraffe"
  }
}

Look, ma! No tags!
